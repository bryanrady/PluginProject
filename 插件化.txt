组件化

    组件化开发就是将一个app分成多个模块，每一个模块都是一个组件(module)，开发过程中我们可以让这些组件相互依赖或者单独调试
    部分组件等，但是最终打包的时候是将这些这些组件合并成一个apk，这就是组件化开发。

插件化

    插件化开发是将整个app拆分成很多模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk（组件化的每个模块是个lib），最终打
    包的时候是将宿主apk和插件apk分开打包。

    插件化的好处
        （1）宿主和插件分开编译，可并发开发；
        （2）可以动态更新插件，不需要安装插件apk；
        （4）解决方法书和变量数爆棚问题（65535）

    一、插桩式实现支付宝接入海量应用
        在支付宝我们可以看到主页面上有很多的应用，而且这些应用基本都是使用原生方式开发的，而支付宝本身就只有几十兆的大小，那么肯定
        不可能是把所有的第三方应用的代码都和支付宝的代码都打包在一起，那是通过什么方式接入这么多应用的呢？

        支付宝是通过加载插件的方式来加载这么多第三方应用的，每个应用都是一个插件，而且这些插件都是未经安装的，并且不是随便一个插件
        都能被集成到支付宝里面的，肯定要有一套接入标准，符合这个标准的插件都能接入到支付宝中来，该标准跟生命周期相关。

        如何实现支付宝加载淘票票插件的这种效果呢？（支付宝：宿主； 淘票票：插件）

        （1）设计接入标准，这个标准是支付宝提供的，符合这个标准的app都能通过支付宝接入进来，该标准跟生命周期相关；
        （2）让插件遵循支付宝的这套标准；
        （3）加载插件得到插件的Classloader和Resources；
                a:  从网络中下载插件到外置卡中，然后将外置卡中的插件复制到程序私有目录下面；
                b:  根据插件apk的绝对路径实例化得到DexClassloader类加载器；
                c:  根据插件apk的绝对路径反射得到AssetManager，然后再通过AssetManager得到资源Resources；
        （4）用一个空壳的Activity来加载插件Activity的内容（四大组件都是这样的模式);
        （5）将要加载的插件的入口Activity的类名传递给空壳的Activity，然后通过插件的类加载器通过类名加载出插件的入口Activity，
             然后将空壳Activity的上下文传递给插件，并通过空壳Activity的生命周期来管理插件的生命周期。
        （6）因为插件本身是没有被安装的，所以不能正常的使用上下文，凡是插件中的Activity有涉及到上下文的方法都需要进行重写，使用支付
             宝传下来的生命周期才可以。






