组件化

    组件化开发就是将一个app分成多个模块，每一个模块都是一个组件(module)，开发过程中我们可以让这些组件相互依赖或者单独调试
    部分组件等，但是最终打包的时候是将这些这些组件合并成一个apk，这就是组件化开发。

插件化

    插件化开发是将整个app拆分成很多模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk（组件化的每个模块是个lib），最终打
    包的时候是将宿主apk和插件apk分开打包。

    插件化的好处
        （1）宿主和插件分开编译，可并发开发；
        （2）可以动态更新插件，不需要安装插件apk；
        （4）解决方法书和变量数爆棚问题（65535）

    一、插桩式实现插件化(支付宝接入海量应用)
        在支付宝我们可以看到主页面上有很多的应用，而且这些应用基本都是使用原生方式开发的，而支付宝本身就只有几十兆的大小，那么肯定
        不可能是把所有的第三方应用的代码都和支付宝的代码都打包在一起，那是通过什么方式接入这么多应用的呢？

        支付宝是通过加载插件的方式来加载这么多第三方应用的，每个应用都是一个插件，而且这些插件都是未经安装的，并且不是随便一个插件
        都能被集成到支付宝里面的，肯定要有一套接入标准，符合这个标准的插件都能接入到支付宝中来，该标准跟生命周期相关。

        1、如何实现支付宝加载淘票票插件的这种效果呢？（支付宝：宿主； 淘票票：插件）

        （1）设计接入标准，这个标准是支付宝提供的，符合这个标准的app都能通过支付宝接入进来，该标准跟生命周期相关；
        （2）让插件遵循支付宝的这套标准；
        （3）加载插件得到插件的Classloader和Resources；
                a:  从网络中下载插件到外置卡中，然后将外置卡中的插件复制到程序私有目录下面；
                b:  根据插件apk的绝对路径实例化得到DexClassloader类加载器；
                c:  根据插件apk的绝对路径反射得到AssetManager，然后再通过AssetManager得到资源Resources；
        （4）用一个空壳的Activity来加载插件Activity的内容（四大组件都是这样的模式);
        （5）将要加载的插件的入口Activity的类名传递给空壳的Activity，然后通过插件的类加载器通过类名加载出插件的入口Activity，
             然后将空壳Activity的上下文传递给插件，并通过空壳Activity的生命周期来管理插件的生命周期。
        （6）因为插件本身是没有被安装的，所以不能正常的使用上下文，凡是插件中的Activity有涉及到上下文的方法都需要进行重写，使用支付
             宝传下来的生命周期才可以。

        2、如何注册插件中静态注册的广播？
            因为插件是没有进行安装的，所以插件中静态注册的广播是不会被监听的，那么该如何让插件中静态注册的广播也被监听呢？

            （1）Android应用有四种安装方式：
                a:  已安装的系统应用安装其他应用
                    特点：安装界面，直接安装
                b:  手机应用市场安装apk
                    特点: 有安装界面
                c:  adb工具安装
                    特点: 无安装界面
                d:  第三方应用安装，点击安装
                    特点:有安装界面 由packageinstaller.apk应用处理安装及卸载过程的界面。

            （2）apk安装的时候系统做了什么事情？
                a:  安装时把apk文件复制到 data/app  ---------------  用户程序安装的目录
                b:  开辟存放应用文件的数据目录  /data/data/包名
                c:  将apk中的dex文件安装到data/dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的
                    四分之一)

                静态广播真正的加载发生在系统启动的时候，系统启动可以理解成将所有app重新安装一遍到系统中。

            （3）程序安装的入口PMS(PackageManagerService)
                PMS.main() -> PMS.scanDirLI(mAppInstallDir) -> PMS.scanPackageLI(file) -> PackageParser.Package.parsePackage(scanFile)

                先扫描data/app目录下面的所有apk文件，然后对apk文件进行解析，解析后的结果是一个PackageParser.Package对象。

                -> PP.parseMonolithicPackage(apkFile)

                在这个方法里面会先实例化一个AssetManager，这个时候的AssetManager还不能加载出资源，必须要调用addAssetPath()才能够解析
                资源，然后将apk文件路径和AssetManager传递到parseBaseApk（）这个方法里面。

                 -> PP.parseBaseApk(apkFile, assets) -> PP.loadApkIntoAssetManager(assets, apkPath)

                 loadApkIntoAssetManager()这个方法就会调用assets.addAssetPath(apkPath)，这个时候AssetManager就有了解析资源的功能。

                 -> AssetManager.openXmlResourceParser(AndroidManifest.xml)

                 里面就是通过xml解析解析AndroidManifest.xml文件，最后得到一个XmlResourceParser对象，XmlResourcePars对象是xml文件在内存中的
                 一个映射，然后将得到的资源和经过xml解析得到的XmlResourceParser传递进parseBaseApk()这个方法里面

                 -> parseBaseApk(res, parser)

                 在这个方法中先通过XmlResourcePars对象拿到xml里面的标签，然后通过字符串判断先找到"application"标签，因为我们在AndroidManifest.xml
                 中是把广播卸载application标签里面。

                 -> parseBaseApplication()

                 在parseBaseApplication()这个方法中找到"receiver"标签，

                 -> parseActivity()

                 在这个方法中先实例化一个Activity对象，然后在parseActivity()这个方法中先找到"intent-filter"标签，然后实例化
                 一个ActivityIntentInfo，它的类型是IntentInfo。

                 然后将这个intentInfo传递到parseIntent()这个方法中，在执行parseIntent()方法过程中，将找到的action通过
                 outInfo.addAction(value) 添加到intentInfo中，这样intentInfo中包含了action。

                 intentInfo包含action后，就通过activity.intents.add(intentInfo) 将这个intentInfo添加到activity中，这样这个
                 activity就包含了intentInfo，也就是intentFilter

                 activity中包含intentInfo后，就可以通过owner.receivers.add(a)  将这个activity添加到Package对象的receivers集合中，
                 这样receivers集合就包含了activity，也就是receiver组件

                -> parseIntent(intentInfo)

                在这个方法中先找到"action"标签，然后将找到的action添加到intentInfo中，这样intentInfo就有了action

                最后的结果就是通过parseActivity()解析得到的结果都放在Package这个对象里面，差不多的思路就是通过解析得到各种各样的组件，
                activities、receivers、providers、services等等这些组件集合。

                这个Activity不是我们平常用的四大组件之一的Activity，而是四大组件的Activity或者BroadcastReceiver的封装的对象，因为四大
                组件Activity和BroadcastReceiver在AndroidManifest.xml注册的时候结构非常像，所以这个只是谷歌工程师代码的一种复用而已。

                class Activity extends Component<ActivityIntentInfo>

                class Component<II extends IntentInfo>

                class ActivityIntentInfo extends IntentInfo

                class IntentInfo extends IntentFilter

                结论：所以如果我们要注册apk中的广播组件，该怎么办？

                (1)先去找PackageParser类，然后调用parsePackage()得到Package对象；
                (2)得到Package对象后，找到Package对象里面的receivers集合；
                (3)然后遍历这个集合，找到每一个Component组件的intents字段；
                (4)然后遍历intents得到每一个intentFilter，然后通过广播动态注册的方式进行注册即可。

                但是广播的动态注册还需要真正四大组件的BroadcastReceiver对象，这个对象怎么得到？

                先拿到Activity组件的全类名，这里不能直接通过Class.forName()来直接获取BroadcastReceiver对象，因为插件是没有安装的，
                可以通过类加载器加载得到这个类，然后通过newInstance得到BroadcastReceiver对象。

                怎么拿到Activity组件的全类名？
                    首先将Activity通过generateActivityInfo()方法转换成ActivityInfo，ActivityInfo继承自ComponentInfo，
                    而ComponentInfo中会包含有名字。这样我们就能通过类加载器加载得到这个类，然后通过newInstance得到
                    BroadcastReceiver对象。


    二、Hook实现插件化
        模拟商城app实现集中式登录，有些功能是需要用户先登录才能进行操作，虽然也可以通过条件判断语句来判断用户是否登录过然后进行相应的
        操作，但是这样会导致我们需要在很多需要登录才能操作的功能进行判断，任务过于繁重。
        那么如何优雅的实现这种功能？

        1. 什么是hook?


